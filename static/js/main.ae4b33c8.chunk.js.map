{"version":3,"sources":["App.js","index.js"],"names":["require","config","Step","Steps","Meta","Card","App","useState","loading","setLoading","query","setQuery","searchResults","setSearchResults","usePersistedState","nominated","setNominated","nominationCount","setNominationCount","key","defaultValue","JSON","parse","localStorage","getItem","state","setState","useEffect","setItem","stringify","MovieDetail","props","movieNominated","body","imdbID","style","width","cover","alt","src","Poster","height","actions","type","disabled","onClick","title","Title","description","Year","NominationDetail","axios","get","params","apikey","process","s","then","res","data","Response","Search","catch","err","addNomination","newNominated","notification","message","deleteNomination","className","headStyle","fontSize","textAlign","size","current","getProgressIndex","placeholder","allowClear","value","onChange","event","target","marginBottom","grid","gutter","justifyContent","dataSource","locale","emptyText","renderItem","searchResult","Item","alignItems","Object","entries","nominee","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ae4b33c8.chunk.js","sourcesContent":["import './App.css';\nimport { Input, Button, Steps, Spin, notification, Card, Space, List } from 'antd';\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nrequire('dotenv').config()\n\nconst { Step } = Steps;\nconst { Meta } = Card;\nconst api_key = process.env.REACT_APP_OMDB_API\n\nfunction App() {\n  // App States\n  const [loading, setLoading] = useState(false);\n  const [query, setQuery] = useState(\"\");\n  const [searchResults, setSearchResults] = useState([]);\n  const [nominated, setNominated] = usePersistedState(\"nominated\", {});\n  const [nominationCount, setNominationCount] = usePersistedState(\"nominatedCount\", 0);\n\n  //Persistant States using LocalStorage\n  function usePersistedState(key, defaultValue) {\n    const [state, setState] = useState(\n      () => JSON.parse(localStorage.getItem(key)) || defaultValue\n    );\n    useEffect(() => {\n      localStorage.setItem(key, JSON.stringify(state));\n    }, [key, state]);\n    return [state, setState];\n  }\n\n  // Notifications\n  const successNotification = () => {\n    notification[\"success\"]({\n      message: 'Nominations Complete',\n      description:\n        'You have successfully nominated five movies! Scroll down to adjust nominations or share final picks.',\n    });\n  };\n\n  // Sub-components\n  function MovieDetail(props) {\n    const movieNominated = props.body.imdbID in nominated;\n    return (\n      <Card\n        style={{ width: 200 }}\n        cover={\n          <img alt=\"missing poster\" src={props.body.Poster} height={250} />\n        }\n        actions={[\n          <Button type=\"primary\" disabled={movieNominated || nominationCount >= 5} onClick={() => props.onClick(props.body)}>\n            Nominate\n          </Button>\n        ]}\n      >\n        <Meta title={props.body.Title} description={props.body.Year} />\n      </Card>\n    )\n  }\n\n  function NominationDetail(props) {\n    return (\n      <Card\n        style={{ width: 200 }}\n        cover={\n          <img alt=\"missing poster\" src={props.body.Poster} height={250} />\n        }\n        actions={[\n          <Button type=\"primary\" onClick={() => props.onClick(props.body)}>\n            Remove\n          </Button>\n        ]}\n      >\n        <Meta title={props.body.Title} description={props.body.Year} />\n      </Card>\n    )\n  }\n\n  useEffect(() => {\n    setLoading(true);\n    axios.get(`https://www.omdbapi.com`,\n      {\n        params: {\n          apikey: api_key,\n          type: \"movie\",\n          s: query\n        }\n      }).then(res => {\n        if (res.data.Response !== \"False\") {\n          setSearchResults(res.data.Search);\n        } else {\n          setSearchResults([]);\n        }\n        setLoading(false);\n      }).catch(err => {\n        setSearchResults([]);\n        setLoading(false);\n      })\n  }, [query]);\n\n  const addNomination = (body) => {\n    var newNominated = { ...nominated }\n    newNominated[body.imdbID] = body;\n    setNominated(newNominated);\n    if (nominationCount >= 4) {\n      successNotification();\n    }\n    setNominationCount(nominationCount + 1);\n  }\n\n  const deleteNomination = (body) => {\n    var newNominated = { ...nominated }\n    delete newNominated[body.imdbID]\n    setNominated(newNominated);\n    setNominationCount(nominationCount - 1);\n  }\n\n  const getProgressIndex = () => {\n    switch (nominationCount) {\n      case 0:\n        return 0;\n      case 5:\n        return 2;\n      default:\n        return 1;\n    }\n  }\n\n  return (\n    <div>\n      <body className=\"App-body\">\n\n        <Card className=\"App-compartment\" title=\"The Shoppies\" headStyle={{ fontSize: 24, textAlign: \"center\" }}>\n          <p> Hello, this is my entry in the shoppy awards. To use this service, either use the search component to look for films, or the nominations component to manage nominations. Your nominations will persist as you come and go from the site. </p>\n          <Steps size=\"small\" current={getProgressIndex()}>\n            <Step title=\"Search OMDB\" />\n            <Step title={nominationCount === 5 ? \"Nominations Complete!\" : (5 - nominationCount) + \" Nominations Left\"} />\n            <Step title=\"Evaluate Picks and Share\" />\n          </Steps>\n        </Card>\n\n        <Card className=\"App-compartment\" title=\"Search\" headStyle={{ fontSize: 24, textAlign: \"center\" }}>\n          <h3> Movie Title:</h3>\n          <Input\n            placeholder=\"Enter movie title here!\"\n            loading={loading}\n            allowClear\n            size=\"large\"\n            value={query}\n            onChange={event => setQuery(event.target.value)}\n            style={{ marginBottom: 20 }}\n          />\n          {query !== \"\" && !loading && <h3>Showing results for: {query}</h3>}\n          <List\n            grid={{ gutter: 16 }}\n            style={{ width: '100%', justifyContent: 'center' }}\n            dataSource={searchResults}\n            loading={loading}\n            locale={{ emptyText: query === \"\" ? \"Your Search Results Go Here!\" : \"No Search Results\" }}\n            renderItem={searchResult => (\n              <List.Item>\n                <MovieDetail body={searchResult} onClick={addNomination} />\n              </List.Item>\n            )}\n          />\n        </Card>\n\n        <Card className=\"App-compartment\" title=\"Nominations\" headStyle={{ fontSize: 24, textAlign: \"center\", justifyContent: \"center\", alignItems: \"center\" }}>\n          <List\n            grid={{ gutter: 16 }}\n            locale={{ emptyText: \"Your Nominations Go Here!\" }}\n            dataSource={Object.entries(nominated)}\n            renderItem={nominee => (\n              <List.Item>\n                <NominationDetail body={nominee[1]} onClick={deleteNomination} />\n              </List.Item>\n            )}\n          />\n        </Card>\n\n      </body>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport \"antd/dist/antd.css\";\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}